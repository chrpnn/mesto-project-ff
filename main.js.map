{"version":3,"file":"main.js","mappings":"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","sources":["webpack:///./src/components/modal.js","webpack:///./src/components/api.js","webpack:///./src/components/card.js","webpack:///./src/components/validation.js","webpack:///./src/index.js"],"sourcesContent":["// открытие попапа\r\nexport function openPopup(popupElement) {\r\n  popupElement.classList.add(\"popup_is-opened\");\r\n  document.addEventListener(\"keydown\", closeByEsc);\r\n  document.addEventListener(\"click\", closeByClickOverlay);\r\n}\r\n\r\n// закрытие попапа\r\nexport function closePopup(popupElement) {\r\n  popupElement.classList.remove(\"popup_is-opened\");\r\n  document.removeEventListener(\"keydown\", closeByEsc);\r\n  document.removeEventListener(\"click\", closeByClickOverlay);\r\n}\r\n\r\n// закрытие попапа по esc\r\nconst closeByEsc = (evt) => {\r\n  if (evt.key === \"Escape\") {\r\n    const openedPopup = document.querySelector(\".popup_is-opened\");\r\n    closePopup(openedPopup);\r\n    }\r\n};\r\n\r\n// закрытие попапа по оверлею\r\nconst closeByClickOverlay = (evt) => {\r\n  if (evt.target.classList.contains(\"popup\")) {\r\n    closePopup(evt.target);\r\n  }\r\n};","export {\r\n    getUserInfo,\r\n    getCards,\r\n    updateUserProfile,\r\n    addNewCard,\r\n    deleteCardFromServer,\r\n    toggleLike,\r\n    updateUserAvatar,\r\n};\r\n\r\nconst config = {\r\n    baseUrl: \"https://nomoreparties.co/v1/wff-cohort-8\",\r\n    headers: {\r\n        authorization: \"18d55e3c-466f-4dfc-9dfd-6044169d9965\",\r\n        \"Content-Type\": \"application/json\",\r\n    },\r\n};\r\n\r\nconst checkResponse = (res) => res.ok ? res.json() : Promise.reject(res.status)\r\n\r\nconst anyRequest = (url, options) => {\r\n    return fetch(url, options)\r\n    .then(res => checkResponse(res))\r\n}\r\n\r\nconst getUserInfo = () => {\r\n    return anyRequest(`${config.baseUrl}/users/me`, {\r\n        headers: config.headers,\r\n    });\r\n};\r\n\r\nconst getCards = () => {\r\n    return anyRequest(`${config.baseUrl}/cards`, {\r\n        headers: config.headers,\r\n    });\r\n};\r\n\r\nconst updateUserProfile = (updatedData) => {\r\n    return anyRequest(`${config.baseUrl}/users/me`, {\r\n        method: \"PATCH\",\r\n        headers: config.headers,\r\n        body: JSON.stringify(updatedData),\r\n    });\r\n};\r\n\r\nconst addNewCard = (name, link) => {\r\n    return anyRequest(`${config.baseUrl}/cards`, {\r\n        method: \"POST\",\r\n        headers: config.headers,\r\n        body: JSON.stringify({\r\n            name,\r\n            link,\r\n        }),\r\n    });\r\n};\r\n\r\nconst deleteCardFromServer = (cardId) => {\r\n    return anyRequest(`${config.baseUrl}/cards/${cardId}`, {\r\n        method: \"DELETE\",\r\n        headers: config.headers,\r\n    });\r\n};\r\n\r\nconst toggleLike = (cardId, isLiked) => {\r\n    const method = isLiked ? \"DELETE\" : \"PUT\";\r\n    return anyRequest(`${config.baseUrl}/cards/likes/${cardId}`, {\r\n        method: method,\r\n        headers: config.headers,\r\n    });\r\n};\r\n\r\nconst updateUserAvatar = (url) => {\r\n    return anyRequest(`${config.baseUrl}/users/me/avatar`, {\r\n        method: \"PATCH\",\r\n        headers: config.headers,\r\n        body: JSON.stringify({\r\n            avatar: url,\r\n        }),\r\n    });\r\n};","import { deleteCardFromServer, toggleLike } from \"./api\";\r\n\r\n// поиск шаблона карточки\r\nfunction getTemplate() {\r\n  const cardTemplate = document.getElementById(\"card-template\").content;\r\n  return cardTemplate.querySelector(\".places__item\");\r\n}\r\n\r\n// обновление количества лайков на карточке\r\nfunction updateLikeCount(card, likeCount) {\r\n  const likeCountElement = card.querySelector(\".card__like-count\");\r\n  likeCountElement.textContent = likeCount;\r\n}\r\n\r\n// функция для обновления состояния кнопки лайка\r\nfunction updateLikeButtonState(button, isLiked) {\r\n  if (!isLiked) {\r\n    button.classList.add(\"card__like-button_is-active\");\r\n  } else {\r\n    button.classList.remove(\"card__like-button_is-active\");\r\n  }\r\n}\r\n\r\nexport function createCard(cardData, deleteCard, openImage, isOwner, userData) {\r\n  const card = getTemplate().cloneNode(true);\r\n  const cardImage = card.querySelector(\".card__image\");\r\n  // заполняем данные из массива\r\n  card.querySelector(\".card__title\").textContent = cardData.name;\r\n  cardImage.src = cardData.link;\r\n  cardImage.alt = cardData.name;\r\n  // устанавливаем количество лайков\r\n  const likeCount = cardData.likes.length;\r\n  const likeCountElement = card.querySelector(\".card__like-count\");\r\n  likeCountElement.textContent = likeCount;\r\n\r\n  // устанавливаем класс если карточка была лайкнута пользователем\r\n  const like = card.querySelector(\".card__like-button\");\r\n  if (cardData.likes.some(like => like._id === userData._id)) {\r\n    like.classList.add(\"card__like-button_is-active\");\r\n  }\r\n\r\n  // если пользователь является владельцем, добавляем иконку удаления\r\n  if (isOwner) {\r\n    const deleteButton = card.querySelector(\".card__delete-button\");\r\n    deleteButton.addEventListener(\"click\", () => {\r\n      deleteCardFromServer(cardData._id)\r\n        .then(() => {\r\n          deleteCard(card);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    });\r\n  } else {\r\n    // если пользователь не является владельцем карточки, скрываем иконку удаления\r\n    const deleteButton = card.querySelector(\".card__delete-button\");\r\n    deleteButton.style.display = \"none\";\r\n  }\r\n\r\n  // обработчик для лайка\r\n  const likeButton = card.querySelector(\".card__like-button\");\r\n  likeButton.addEventListener(\"click\", () => {\r\n    const isLiked = likeButton.classList.contains(\r\n      \"card__like-button_is-active\"\r\n    );\r\n    toggleLike(cardData._id, isLiked)\r\n      .then((updatedCardData) => {\r\n        // обновляем количество лайков и состояние кнопки лайка\r\n        updateLikeCount(card, updatedCardData.likes.length);\r\n        updateLikeButtonState(likeButton, isLiked);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Ошибка при изменении состояния лайка:\", error);\r\n      });\r\n  });\r\n\r\n  // обработчик для открытия изображения\r\n  cardImage.addEventListener(\"click\", () => {\r\n    openImage(cardData);\r\n  });\r\n\r\n  return card;\r\n}\r\n\r\n// Функция для удаления карточки из DOM\r\nexport function deleteCard(card) {\r\n  card.remove();\r\n}\r\n\r\n// Функция для переключения состояния кнопки лайка\r\nexport function likeCard(likeButton) {\r\n  likeButton.classList.toggle(\"card__like-button_is-active\");\r\n}","export { enableValidation, clearValidation };\r\n\r\nconst hideInputError = (\r\n  errorElement,\r\n  inputElement,\r\n  errorActiveClass,\r\n  inputErrorClass\r\n) => {\r\n  errorElement.textContent = \"\";\r\n  inputElement.classList.remove(inputErrorClass);\r\n  errorElement.classList.remove(errorActiveClass);\r\n};\r\n\r\n// 4\r\nconst showInputError = (\r\n  errorElement,\r\n  inputElement,\r\n  errorActiveClass,\r\n  inputErrorClass\r\n) => {\r\n  errorElement.textContent = inputElement.validationMessage;\r\n  inputElement.classList.add(inputErrorClass);\r\n  errorElement.classList.add(errorActiveClass);\r\n};\r\n\r\n// 3\r\nconst checkInputValidity = (\r\n  formElement,\r\n  inputElement,\r\n  errorActiveClass,\r\n  inputErrorClass\r\n) => {\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  if (!inputElement.validity.valid) {\r\n    //функция отображения сообщения об ошибке\r\n    showInputError(\r\n      errorElement,\r\n      inputElement,\r\n      errorActiveClass,\r\n      inputErrorClass\r\n    );\r\n  } else {\r\n    hideInputError(\r\n      errorElement,\r\n      inputElement,\r\n      errorActiveClass,\r\n      inputErrorClass\r\n    );\r\n  }\r\n};\r\n\r\n// 2\r\nconst setEvtListeners = (formElement, settingObj) => {\r\n  const inputList = Array.from(\r\n    formElement.querySelectorAll(settingObj.inputSelector)\r\n  );\r\n  inputList.forEach((inputElement) => {\r\n    inputElement.addEventListener(\"input\", () => {\r\n      checkInputValidity(\r\n        formElement,\r\n        inputElement,\r\n        settingObj.errorActiveClass,\r\n        settingObj.inputErrorClass\r\n      );\r\n\r\n      const submitButton = formElement.querySelector(\r\n        settingObj.submitButtonSelector\r\n      );\r\n      toggleButtonState(\r\n        inputList,\r\n        submitButton,\r\n        settingObj.inactiveButtonClass\r\n      );\r\n    });\r\n  });\r\n};\r\n\r\n// 1\r\nconst enableValidation = (settingObj) => {\r\n  const formList = Array.from(\r\n    document.querySelectorAll(settingObj.formSelector)\r\n  );\r\n  formList.forEach((formElement) => {\r\n    setEvtListeners(formElement, settingObj);\r\n  });\r\n};\r\n\r\n// 1-1\r\nconst clearValidation = (formElement, settingObj) => {\r\n  // Находим все элементы с классом, указанным в настройках валидации\r\n  const inputList = Array.from(\r\n    formElement.querySelectorAll(settingObj.inputSelector)\r\n  );\r\n  // Удаляем сообщения об ошибках и убираем классы ошибок у всех соответствующих элементов\r\n  inputList.forEach((inputElement) => {\r\n    const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n    hideInputError(\r\n      errorElement,\r\n      inputElement,\r\n      settingObj.errorActiveClass,\r\n      settingObj.inputErrorClass\r\n    );\r\n  });\r\n\r\n  // Находим кнопку отправки формы и делаем её неактивной\r\n  const submitButton = formElement.querySelector(\r\n    settingObj.submitButtonSelector\r\n  );\r\n\r\n  toggleButtonState(inputList, submitButton, settingObj.inactiveButtonClass);\r\n};\r\n\r\n// togglebutton\r\nconst toggleButtonState = (inputList, buttonElement, inactiveButtonClass) => {\r\n  // Если есть хотя бы один невалидный инпут\r\n  if (hasInvalidInput(inputList)) {\r\n    // сделай кнопку неактивной\r\n    buttonElement.disabled = true;\r\n    buttonElement.classList.add(inactiveButtonClass);\r\n  } else {\r\n    // иначе сделай кнопку активной\r\n    buttonElement.disabled = false;\r\n    buttonElement.classList.remove(inactiveButtonClass);\r\n  }\r\n};\r\n\r\nfunction hasInvalidInput(inputList) {\r\n  return (\r\n    inputList.some((inputElement) => !inputElement.validity.valid) ||\r\n    inputList.some((inputElement) => inputElement.value === \"\")\r\n  );\r\n}\r\n","import \"./pages/index.css\";\r\nimport { openPopup, closePopup } from \"./components/modal.js\";\r\nimport { deleteCard, createCard } from \"./components/card.js\";\r\nimport { enableValidation, clearValidation } from \"./components/validation.js\";\r\nimport {\r\n  getUserInfo,\r\n  getCards,\r\n  updateUserProfile,\r\n  addNewCard,\r\n  updateUserAvatar,\r\n} from \"./components/api.js\";\r\n\r\n\r\n// Получение DOM элементов\r\nconst editPopup = document.querySelector(\".popup_type_edit\");\r\nconst addPopup = document.querySelector(\".popup_type_new-card\");\r\nconst imagePopup = document.querySelector(\".popup_type_image\");\r\nconst buttonOpenPopupAvatar = document.querySelector(\".popup_type_avatar-edit\");\r\nconst placesList = document.querySelector(\".places__list\");\r\nconst editButton = document.querySelector(\".profile__edit-button\");\r\nconst profileName = document.querySelector(\".profile__title\");\r\nconst profileDescription = document.querySelector(\".profile__description\");\r\nconst addButton = document.querySelector(\".profile__add-button\");\r\nconst buttonEditAvatar = document.querySelector(\".profile__image\");\r\nconst image = imagePopup.querySelector(\".popup__image\");\r\nconst caption = imagePopup.querySelector(\".popup__caption\");\r\nconst buttonClosePopupProfile = editPopup.querySelector(\".popup__close\");\r\nconst buttonClosePopupAdd = addPopup.querySelector(\".popup__close\");\r\nconst buttonClosePopupImage = imagePopup.querySelector(\".popup__close\");\r\nconst buttonClosePopupAvatar = buttonOpenPopupAvatar.querySelector(\".popup__close\");\r\n\r\n// попап редактирование профиля\r\neditButton.addEventListener(\"click\", function () {\r\n  nameInput.value = profileName.textContent;\r\n  jobInput.value = profileDescription.textContent;\r\n  openPopup(editPopup);\r\n  clearValidation(editPopup, validationObj);\r\n});\r\nbuttonClosePopupProfile.addEventListener(\"click\", function () {\r\n  closePopup(editPopup);\r\n});\r\n\r\n// попап добавление новых карточек\r\naddButton.addEventListener(\"click\", function () {\r\n  openPopup(addPopup);\r\n  clearValidation(addPopup, validationObj);\r\n});\r\nbuttonClosePopupAdd.addEventListener(\"click\", function () {\r\n  closePopup(addPopup);\r\n});\r\n\r\n// попап смена аватарки\r\nbuttonEditAvatar.addEventListener(\"click\", function () {\r\n  openPopup(buttonOpenPopupAvatar);\r\n  clearValidation(buttonOpenPopupAvatar, validationObj);\r\n});\r\nbuttonClosePopupAvatar.addEventListener(\"click\", function () {\r\n  closePopup(buttonOpenPopupAvatar);\r\n});\r\n\r\n// открытие изображения карточки\r\nfunction openImage(cardData) {\r\n  // заполняем изображение и описание в модальном окне данными из карточки\r\n  image.src = cardData.link;\r\n  image.alt = cardData.name;\r\n  caption.textContent = cardData.name;\r\n  openPopup(imagePopup);\r\n}\r\nbuttonClosePopupImage.addEventListener(\"click\", function () {\r\n  closePopup(imagePopup);\r\n});\r\n\r\n// редактирование имени и информации о себе, находим форму и поля формы для редактирования профиля\r\nconst formEditPopup = document.querySelector(\".popup_type_edit\");\r\nconst nameInput = formEditPopup.querySelector(\".popup__input_type_name\");\r\nconst jobInput = formEditPopup.querySelector(\".popup__input_type_description\");\r\n\r\n// функция для отображения состояния загрузки\r\nfunction renderLoading(button, buttonText) {\r\n  button.textContent = buttonText;\r\n  button.disabled = ( buttonText === \"Сохранение...\" );\r\n}\r\n\r\n// функция для обработки события отправки формы редактирования профиля\r\nfunction handleSubmitProfileForm(evt) {\r\n  evt.preventDefault();\r\n  // isLoading = true;\r\n  renderLoading(editPopup.querySelector(\".popup__button\"), \"Сохранение...\");\r\n  // отмена стандартной отправки формы\r\n  const updatedProfileData = {\r\n    name: nameInput.value,\r\n    about: jobInput.value,\r\n  };\r\n  updateUserProfile(updatedProfileData)\r\n    .then((updatedData) => {\r\n      // обновляем текстовые элементы\r\n      profileName.textContent = updatedProfileData.name;\r\n      profileDescription.textContent = updatedProfileData.about;\r\n      closePopup(editPopup);\r\n      console.log(\"Данные профиля успешно обновлены:\", updatedData);\r\n    })\r\n    .catch((error) => {\r\n      console.log(\"Ошибка при обновлении данных профиля:\", error);\r\n    })\r\n    .finally(() => {\r\n      renderLoading(editPopup.querySelector(\".popup__button\"), \"Сохранить\");\r\n    });\r\n}\r\n\r\n// Прикрепляем обработчик к форме:\r\n// он будет следить за событием “submit” - «отправка»\r\nformEditPopup.addEventListener(\"submit\", handleSubmitProfileForm);\r\n\r\n// добавление новой карточки, находим поля формы в DOM\r\nconst inputPlaceName = addPopup.querySelector(\".popup__input_type_card-name\");\r\nconst linkInput = addPopup.querySelector(\".popup__input_type_url\");\r\n\r\n// обработчик отправки формы для добавления карточки\r\nfunction handleSubmitAddForm(evt) {\r\n  evt.preventDefault();\r\n  renderLoading(addPopup.querySelector(\".popup__button\"), \"Сохранение...\");\r\n  const placeNameValue = inputPlaceName.value;\r\n  const linkValue = linkInput.value;\r\n  addNewCard(placeNameValue, linkValue)\r\n    .then((updatedData) => {\r\n      // создание новуй карточки и добавление её в начало\r\n      const newCard = createCard(\r\n        updatedData,\r\n        deleteCard,\r\n        openImage,\r\n        true\r\n      );\r\n      placesList.prepend(newCard);\r\n      // очищаем форму\r\n      inputPlaceName.value = \"\";\r\n      linkInput.value = \"\";\r\n      closePopup(addPopup);\r\n    })\r\n    .catch((error) => {\r\n      console.log(\"Ошибка при обновлении данных профиля:\", error);\r\n    })\r\n    .finally(() => {\r\n      renderLoading(addPopup.querySelector(\".popup__button\"), \"Сохранить\");\r\n    });\r\n}\r\n\r\n// прикрепляем обработчик к форме добавления карточки\r\naddPopup.addEventListener(\"submit\", handleSubmitAddForm);\r\n\r\n// объект с настройками валидации форм\r\nconst validationObj = {\r\n  formSelector: \".popup__form\",\r\n  inputSelector: \".popup__input\",\r\n  submitButtonSelector: \".popup__button\",\r\n  inactiveButtonClass: \"popup__button_disabled\",\r\n  inputErrorClass: \"popup__input_type_error\",\r\n  errorClass: \"popup__error_visible\",\r\n};\r\n\r\n// включаем валидацию для всех форм\r\nenableValidation(validationObj);\r\n\r\n// получаем информацию о пользователе и карточках с сервера\r\nPromise.all([getUserInfo(), getCards()])\r\n  .then((results) => {\r\n    const [userData, cardsData] = results;\r\n    // обновляем профиль пользователя\r\n    profileName.textContent = userData.name;\r\n    profileDescription.textContent = userData.about;\r\n    buttonEditAvatar.style.backgroundImage = `url(${userData.avatar})`;\r\n\r\n    cardsData.forEach((cardData) => {\r\n      // Создание и добавление карточки на страницу\r\n      const isOwner = cardData.owner._id === userData._id;\r\n      const newCard = createCard(\r\n        cardData,\r\n        deleteCard,\r\n        openImage,\r\n        isOwner,\r\n        userData\r\n      );\r\n      placesList.appendChild(newCard);\r\n    });\r\n  })\r\n  .catch((error) => {\r\n    console.log(\"Ошибка при загрузке данных с сервера:\", error);\r\n  });\r\n\r\n// смена аватарки профиля\r\nfunction handleEditUserAvatar(evt) {\r\n  evt.preventDefault();\r\n  renderLoading(buttonOpenPopupAvatar.querySelector(\".popup__button\"), \"Сохранение...\");\r\n  const avatarUrlInput = buttonOpenPopupAvatar.querySelector(\r\n    \".popup__input_type_edit-avatar\"\r\n  );\r\n  const avatarUrl = avatarUrlInput.form.link.value;\r\n  updateUserAvatar(avatarUrl)\r\n    .then((data) => {\r\n      // в случае успешного изменения аватара, обновляем его на странице и закрываем форму\r\n      buttonEditAvatar.style.backgroundImage = `url(${data.avatar})`;\r\n      closePopup(buttonOpenPopupAvatar);\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Ошибка при обновлении аватара:\", error);\r\n    })\r\n    .finally(() => {\r\n      renderLoading(buttonOpenPopupAvatar.querySelector(\".popup__button\"), \"Сохранить...\");\r\n    });\r\n}\r\n\r\nbuttonOpenPopupAvatar.addEventListener(\"submit\", handleEditUserAvatar);"],"names":["openPopup","popupElement","classList","add","document","addEventListener","closeByEsc","closeByClickOverlay","closePopup","remove","removeEventListener","evt","key","querySelector","target","contains","config","baseUrl","headers","authorization","anyRequest","url","options","fetch","then","res","ok","json","Promise","reject","status","checkResponse","createCard","cardData","deleteCard","openImage","isOwner","userData","card","getElementById","content","cloneNode","cardImage","textContent","name","src","link","alt","likeCount","likes","length","like","some","_id","cardId","concat","method","catch","error","console","log","style","display","likeButton","isLiked","toggleLike","updatedCardData","updateLikeCount","button","updateLikeButtonState","hideInputError","errorElement","inputElement","errorActiveClass","inputErrorClass","clearValidation","formElement","settingObj","inputList","Array","from","querySelectorAll","inputSelector","forEach","id","submitButton","submitButtonSelector","toggleButtonState","inactiveButtonClass","buttonElement","validity","valid","value","hasInvalidInput","disabled","editPopup","addPopup","imagePopup","buttonOpenPopupAvatar","placesList","editButton","profileName","profileDescription","addButton","buttonEditAvatar","image","caption","buttonClosePopupProfile","buttonClosePopupAdd","buttonClosePopupImage","buttonClosePopupAvatar","nameInput","jobInput","validationObj","formEditPopup","renderLoading","buttonText","preventDefault","updatedData","updatedProfileData","about","body","JSON","stringify","finally","inputPlaceName","linkInput","newCard","prepend","formSelector","errorClass","validationMessage","showInputError","checkInputValidity","setEvtListeners","all","results","_results","cardsData","backgroundImage","avatar","owner","appendChild","form","data"],"sourceRoot":""}